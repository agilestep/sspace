
<style>
  h1 {
    margin-bottom: 30px;
    align-content: center;
    margin-left: 20%;
    margin-right: auto;
    font-weight: 700;
    font-family: 'Montserrat', sans-serif;
    letter-spacing: 4px;
    font-size: 32px;
    text-transform: uppercase;
  }

  h2{font-size: 1.8em;
    margin-top: 40px;
    margin-bottom: 40px;}

  span{
    font-weight: bolder;
  }
  .sidebar {
    position: fixed;
    top: 0;
    left: 0;
    width: 200px;
    height: 100%;
    background-color: #f2f2f2;
    padding: 20px;
    box-sizing: border-box;
    padding-top: 100px;
  }

  .container{
    display: flex;

  }

  #projects{
    background-color: #494949;
    opacity:0.9;
    color: white;
  }

  #projects {
    margin-left: 200px;
    padding: 20px;
    box-sizing: border-box;
    font-family: 'Montserrat', sans-serif;
    margin: 50px;
    margin-top: 100px;
    flex: auto;
    align-items: center;
  }


  @media only screen and (min-width: 1200px) {
    .layout-margin{
      width: 20%;
    }

    .layout-item{
      width: 60%;
    }
  }

  @media only screen and (max-width: 1200px) {
    .layout-margin{
      width: 1%;
    }

    .layout-item{
      width: 100%;
    }
  }

  img{
    display: inline-block;
    margin-left: 5%;
    margin-bottom: 5%;

  }

  body{
    background-image: url("/images/james-harrison-laptop_image.jpg");
    background-repeat: no-repeat, repeat;
    background-position: center; /* Center the image */
    background-size: contain;
    background-attachment: fixed;
    background-color: black;
  }

  .h2_with_line{
    display: block;padding-bottom: 5px; border-bottom: 5px solid rgba(57,255,139,0.48);
    border-top: 5px solid rgba(57,255,139,0.48);
  }

  @media only screen and (min-width: 1200px) {
    .image6,.image9,.image10,.image11{
      height: 300px;
      width: 400px;
    }
    .image5,.image7,.image8,.image12,.image13,.image14,.image15,.image16{
      height: 300px;
      width: 300px;
    }

    .image1{
      height: 180px;
      width: 400px;
    }
    .image2{
      height: 150px;
      width: 300px;
    }

    .image3{
      height: 180px;
      width: 400px;
    }
    .image4{
      height: 150px;
      width: 300px;
    }
  }

  @media only screen and (max-width: 1200px) {
    .image6,.image11{
      height: 200px;
      width: 300px;
    }

    .image9,.image10
    {
      height: 200px;
      width: 200px;
    }

    .image5,.image7,.image8,.image12,.image13,.image14,.image15,.image16{
      height: 200px;
      width: 290px;
    }

    .image1{
      height: 120px;
      width: 300px;
    }
    .image2{
      height: 120px;
      width: 270px;
    }

    .image3{
      height: 120px;
      width: 300px;
    }
    .image4{
      height: 120px;
      width: 270px;
    }
  }

  #span_space{
    text-decoration: underline;
    text-decoration-style: solid;
    text-decoration-color: rgba(57,255,139,0.48);

  }

  pre{
    margin-left: 30px;
    margin-right: 30px;
  }

  p{
    font-size: 18px;
    margin-left: 30px;
    margin-right: 30px;
    margin-top: 30px;
  }

  .hljs-copy-button {
    color: #fff;
    background-color: #28a745;
    border-color: #28a745;
  }

  .download{
    border-color: #28a745;
    color: white;
    background-color: grey;
    margin-left: 30px;
    min-width: 200px;
    margin-bottom: 20px;
  }
  h3{
    margin-left: 30px;
  }
  span{
    color: #28a745;
  }
</style>


<div class="container">
  <article id="projects" class="layout-item">
    <h1> So here is <span id="span_space">SpaceMin.js </span>:  </h1>
    <h2 style="margin-bottom: 5px;"> Framework We All Deserve! </br>
    </h2>

    <div>
      <h2 class="h2_with_line">
        This is how a Lightway framework is really looking like!
      </h2>
      <p>
        There are many frameworks that are called ligh and small but here is how really a tiny framework looking like:
      </p>

      <p style="font-size: 22px;">
        Vue.js - 165kb </br>
        Angular.js - 196kb </br>
        SpaceMin.js - 8,9Â kB! </br>
      </p>

      <h2 class="h2_with_line">
        Here is what you can do with SpaceMin.js
      </h2>


      <p>
        How to start using space.min.js:
      <pre>
      <code class="language-html">
  &lt;head&gt;
    &lt;script src=&quot;.../space.min.js.min&quot;&gt;&lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h2&gt;{name}&lt;/h2&gt;
    &lt;script&gt;
      new SpaceMin({name: &quot;John&quot;})
    &lt;/script&gt;
  &lt;/body&gt;
      </code>
    </pre>

      </p>


      <p>
        To bind to specific dom element:
      <pre>
      <code class="language-js">
    &lt;script&gt;
        new SpaceMin({name: &quot;John&quot;},el: '#container')
    &lt;/script&gt;
      </code>
    </pre>
      </p>


      <p>
        Here is standard way to bind element:
      <pre>
      <code class="language-html">
    &lt;p&gt;
      My friend is in the room: {name}
    &lt;/p&gt;
      </code>
    </pre>
      </p>



      <p>
        </br>
        Just use 'i' for to loop, dont loose your time!
      <pre>
      <code class="language-html">
&lt;p s-each=&quot;cats&quot; &gt;
  Meet my Cat: {i.name}
&lt;/p&gt;
      </code>
    </pre>
      </p>

      <p>
        </br>
        Or you can use 'c - from cats' automatically and stay happy:
      <pre>
      <code class="language-html">
&lt;p s-each=&quot;cats&quot; &gt;
  Meet my Cat: {c.name}
&lt;/p&gt;
      </code>
    </pre>
      </p>

      <p>
        </br>
        Or even just use field name:
      <pre>
      <code class="language-html">
&lt;p s-each=&quot;cats&quot; &gt;
  Meet my Cat: {:name}
&lt;/p&gt;
      </code>
    </pre>
      </p>


      <p>
        </br>
        Here can use input to update data:
      <pre>
      <code class="language-html">

      &lt;input type=&quot;text&quot; s-bind=&quot;name&quot; value=&quot;Tomas&quot;&gt;&lt;/input&gt;
      His name is: {name}

      Result:

      &lt;input type=&quot;text&quot; s-bind=&quot;name&quot; value=&quot;Tomas&quot;&gt;&lt;/input&gt;
      His name is: Tomas
        </code>
    </pre>
      </p>

      <p>
        Run Random Code directly!:
      <pre>
      <code class="language-html">
     &lt;div s-eval&gt;
          let a = 33
          let b = 66
          a + b
        &lt;/div&gt;

        Result:

         &lt;div&gt;
            99
          &lt;/div&gt;
      </code>

    </pre>
      </p>


      <p>
        Run expression:
      <pre>
     <code class="language-html">
      &lt;div&gt;
         ${ console.log('it works!');  }
      &lt;/div&gt;
      Result:
      'it works!'
      </code>
    </pre>

      </p>

      <p>
        Use you data within expression:
      <pre>
        <code class="language-html">
    &lt;div s-eval&gt;
        b = :name + &quot; &quot; + :age;
        console.log(b);
    &lt;/div&gt;
    Result:
    'John 33'
        </code>
      </pre>
      </p>

      <h3>How it works:</h3>
      <p>
        Data fields will automatically get <span>double direction binding </span>. So if you run:

      <pre>
        <code class="language-js">
         space.data.name = "New Name"
          // It will automatically trigger re-rendering of that specific dom element(s).
        </code>
      </pre>
      </p>

      <p>
        Data arrays will also trigger <span>render</span> action in case you change specific item like:
      <pre>
        <code class="language-js">
        space.cars[3] = {name: "Tesla", model: 'Model S'}
        </code>
      </pre>
      </p>

      <p>
        Do you want to try it? Please feel free to test it:
        <a href="/space.min.js" class="btn btn-important download" download>
          Download - Space.min.js(8,9kB)
        </a>
      </p>


      <h3 style="color: #ff7772"> * This Library is still is in Beta Stage - please don't use it on production! </h3>

  </article>
</div>

